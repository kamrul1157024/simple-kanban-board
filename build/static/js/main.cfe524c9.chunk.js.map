{"version":3,"sources":["Kanban.js","reportWebVitals.js","index.js"],"names":["CardType","KanbanCard","text","KanbanRow","rowId","handleDrop","useDrag","type","item","collect","monitor","opacity","isDragging","end","dropResult","getDropResult","colId","drag","ref","className","style","KanbanColumn","props","colName","color","useDrop","accept","drop","isOver","canDrop","droppingBox","children","SimpleKanban","initialKanbanColumns","useState","kanbanColumns","setKanbanColumns","prevKanbanColumns","destColId","srcColumn","find","column","data","map","includes","destColumn","rowIndexPosInSrcColumn","findIndex","row","push","splice","moveCards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getContent","n","contents","i","Quote","uuidv4","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.cfe524c9.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport './App.css';\n\nconst CardType = { TEXT: 'text', TEST: 'test' };\n\nfunction KanbanCard({ text }) {\n  return (<p>{text}</p>);\n}\n\nfunction KanbanRow({\n  text, rowId, handleDrop,\n}) {\n  const [{ opacity }, drag] = useDrag(() => ({\n    type: CardType.TEXT,\n    item: { rowId },\n    collect: (monitor) => ({\n      opacity: monitor.isDragging() ? 0.5 : 0.9,\n    }),\n    end(item, monitor) {\n      const dropResult = monitor.getDropResult();\n      if (dropResult !== null) {\n        handleDrop(item.rowId, dropResult.colId);\n      }\n    },\n  }), [rowId]);\n\n  return (\n    <div ref={drag} className='content-row' style={{ opacity }}>\n      <KanbanCard text={text}/>\n    </div>\n  );\n}\n\nfunction KanbanColumn(props) {\n  const {\n    colName, color, colId,\n  } = props;\n  const [{ canDrop, isOver }, drop] = useDrop(() => ({\n    accept: CardType.TEXT,\n    drop: () => ({ colName, colId }),\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  }), [colName, colId]);\n\n  const isActive = canDrop && isOver;\n  const droppingBox = isActive ? 'dropping-box' : '';\n  return (\n    <div ref={drop} className={`col bg-color-${color} ${droppingBox}`}>\n      <div className='col-header'>{colName}</div>\n      {props.children}\n    </div>\n  );\n}\n\nfunction moveCards(kanbanColumns, destColId, rowId) {\n  const srcColumn = kanbanColumns\n    .find((column) => column.data.map((data) => data.rowId).includes(rowId));\n  const destColumn = kanbanColumns.find((column) => column.colId === destColId);\n  const rowIndexPosInSrcColumn = srcColumn.data.findIndex((row) => row.rowId === rowId);\n  destColumn.data.push(srcColumn.data[rowIndexPosInSrcColumn]);\n  srcColumn.data.splice(rowIndexPosInSrcColumn, 1);\n  return [...kanbanColumns];\n}\n\nfunction SimpleKanban({ initialKanbanColumns }) {\n  const [kanbanColumns, setKanbanColumns] = useState(initialKanbanColumns);\n\n  const handleDrop = (rowId, colId) => {\n    setKanbanColumns((prevKanbanColumns) => moveCards(prevKanbanColumns, colId, rowId));\n  };\n\n  return (\n    <div className=\"container\">\n      {\n        kanbanColumns && kanbanColumns.map((column) => (\n          <KanbanColumn\n            key={column.colId}\n            colName={column.colName}\n            color={column.color}\n            colId={column.colId}\n          >\n            {column.data.map(\n              ({ text, rowId }) => <KanbanRow\n                key={rowId}\n                text={text}\n                rowId={rowId}\n                handleDrop={handleDrop}\n              />,\n            )\n            }\n          </KanbanColumn>))\n      }\n    </div>\n  );\n}\n\nexport default SimpleKanban;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as Quote from 'inspirational-quotes';\nimport SimpleKanban from './Kanban';\nimport reportWebVitals from './reportWebVitals';\n\nfunction getContent(n) {\n  const contents = [];\n  for (let i = 0; i < n; i += 1) {\n    contents.push({\n      text: Quote.getRandomQuote(),\n      rowId: uuidv4(),\n    });\n  }\n  return contents;\n}\n\nconst initialKanbanColumns = [\n  {\n    colName: 'QuoteList1', color: 'purple', colId: uuidv4(), data: getContent(7),\n  },\n  {\n    colName: 'QuoteList2', color: 'orange', colId: uuidv4(), data: getContent(3),\n  },\n  {\n    colName: 'QuoteList3', color: 'green', colId: uuidv4(), data: getContent(2),\n  },\n  {\n    colName: 'QuoteList4', color: 'blue', colId: uuidv4(), data: getContent(5),\n  },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <SimpleKanban initialKanbanColumns={initialKanbanColumns}/>\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}